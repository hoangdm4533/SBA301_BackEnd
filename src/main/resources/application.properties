# =================================
# Application Configuration
# =================================
spring.config.import=optional:env[.env]
spring.application.name=${SPRING_APPLICATION_NAME:demo}
server.port=${PORT:8080}

# =================================
# Database Configuration
# =================================
spring.datasource.url=${SPRING_DATASOURCE_URL}
spring.datasource.username=${SPRING_DATASOURCE_USERNAME}
spring.datasource.password=${SPRING_DATASOURCE_PASSWORD}
spring.jpa.hibernate.ddl-auto=${SPRING_JPA_HIBERNATE_DDL_AUTO:update}

# =================================
# Security Configuration
# =================================
jwt.secret=${JWT_SECRET}
jwt.expiration.ms=${JWT_EXPIRATION_MS}
jwt.refresh.expiration.ms=${JWT_REFRESH_EXPIRATION_MS}

# =================================
# Email Configuration
# =================================
spring.mail.host=${SPRING_MAIL_HOST}
spring.mail.port=${SPRING_MAIL_PORT}
spring.mail.username=${SPRING_MAIL_USERNAME}
spring.mail.password=${SPRING_MAIL_PASSWORD}
spring.mail.properties.mail.smtp.auth=${SPRING_MAIL_PROPERTIES_MAIL_SMTP_AUTH}
spring.mail.properties.mail.smtp.starttls.enable=${SPRING_MAIL_PROPERTIES_MAIL_SMTP_STARTTLS_ENABLE}

# =================================
# OAuth2 Configuration
# =================================
# Google
spring.security.oauth2.client.registration.google.client-id=${SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_GOOGLE_CLIENT_ID}
spring.security.oauth2.client.registration.google.client-secret=${SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_GOOGLE_CLIENT_SECRET}
spring.security.oauth2.client.registration.google.scope=${SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_GOOGLE_SCOPE}
spring.security.oauth2.client.registration.google.redirect-uri=${SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_GOOGLE_REDIRECT_URI}

# Facebook
spring.security.oauth2.client.registration.facebook.client-id=${SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_FACEBOOK_CLIENT_ID}
spring.security.oauth2.client.registration.facebook.client-secret=${SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_FACEBOOK_CLIENT_SECRET}
spring.security.oauth2.client.registration.facebook.scope=${SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_FACEBOOK_SCOPE}
spring.security.oauth2.client.registration.facebook.redirect-uri=${SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_FACEBOOK_REDIRECT_URI}
spring.security.oauth2.client.provider.facebook.token-uri=${SPRING_SECURITY_OAUTH2_CLIENT_PROVIDER_FACEBOOK_TOKEN_URI}
spring.security.oauth2.client.provider.facebook.user-info-uri=${SPRING_SECURITY_OAUTH2_CLIENT_PROVIDER_FACEBOOK_USER_INFO_URI}
spring.security.oauth2.client.provider.facebook.authorization-uri=${SPRING_SECURITY_OAUTH2_CLIENT_PROVIDER_FACEBOOK_AUTHORIZATION_URI}

# =================================
# Frontend Configuration
# =================================
frontend.base-url=${FRONTEND_BASE_URL:http://localhost:3000}
frontend.url.base=${FRONTEND_BASE_URL:http://localhost:3000}

# =================================
# Actuator Configuration
# =================================
management.endpoints.web.base-path=${ACTUATOR_BASE_PATH:/actuator}
management.endpoints.web.exposure.include=${ACTUATOR_EXPOSURE:health,info,metrics,loggers}
management.endpoint.health.show-details=${ACTUATOR_HEALTH_DETAILS:always}
management.health.db.enabled=true

# =================================
# LOGGING CONFIGURATION (CLEAN, LIGHT PRODUCTION)
# =================================

# Root logger level
logging.level.root=INFO

# Spring Framework general logging level
logging.level.org.springframework=INFO

# Spring Security logging level
logging.level.org.springframework.security=INFO

# Spring JDBC logging level
logging.level.org.springframework.jdbc=INFO

# Reduce request mapping handler logs from DEBUG to INFO
logging.level.org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping=INFO

# Keep DispatcherServlet logs at INFO
logging.level.org.springframework.web.servlet.DispatcherServlet=INFO

# Disable DEBUG from RequestResponseBodyMethodProcessor
logging.level.org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor=WARN

# Disable DEBUG from HttpEntityMethodProcessor
logging.level.org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor=WARN

# Hibernate SQL logging at INFO level (disable heavy DEBUG logs)
logging.level.org.hibernate.SQL=INFO
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=INFO
logging.level.org.hibernate.type.descriptor.sql=INFO

# Reduce Tomcat cookie parser warnings
logging.level.org.apache.tomcat.util.http.parser.Cookie=WARN

# Your application package logging level (can set to INFO in production)
logging.level.com.example.demologin=DEBUG

# =================================
# Console log pattern with ANSI colors
# =================================
logging.pattern.console=%clr(%d{yyyy-MM-dd HH:mm:ss.SSS, Asia/Ho_Chi_Minh}){cyan} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(${PID}){yellow} %clr(---){green} %clr([%thread]){magenta,bright} %clr(%logger{36}){cyan} %clr(:){green} %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}

# Enable ANSI colors in console output
spring.output.ansi.enabled=ALWAYS

# Cache settings
spring.cache.type=simple
spring.cache.cache-names=ipLocations

# Time-zone and Java options
TZ=Asia/Ho_Chi_Minh
JAVA_OPTS=-Duser.timezone=Asia/Ho_Chi_Minh

# Cloudflare Turnstile
cloudflare.turnstile.secret-key=${CLOUDFLARE_TURNSTILE_SECRET_KEY}

# Human verify token config
verify.token.secret=${VERIFY_TOKEN_SECRET}
verify.token.expiry-ms=${VERIFY_TOKEN_EXPIRATION_MS:86400000}


minio.access-key=${MINIO_ACCESS_KEY}
minio.secret-key=${MINIO_SECRET_KEY}
minio.bucket=${MINIO_BUCKET}
minio.url=${MINIO_URL}