package com.example.demologin.initializer.components;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

import com.example.demologin.entity.Exam;
import com.example.demologin.entity.Grade;
import com.example.demologin.entity.Option;
import com.example.demologin.entity.Question;
import com.example.demologin.entity.User;
import com.example.demologin.repository.ExamRepository;
import com.example.demologin.repository.GradeRepository;
import com.example.demologin.repository.OptionRepository;
import com.example.demologin.repository.QuestionRepository;
import com.example.demologin.repository.UserRepository;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

/**
 * Exam Data Initializer
 * 
 * Responsible for creating sample exam data including questions and options.
 * This must run after EducationDataInitializer and DefaultUserInitializer
 * since it depends on grades and teachers.
 */
@Component
@RequiredArgsConstructor
@Slf4j
public class ExamDataInitializer {

    private final ExamRepository examRepository;
    private final QuestionRepository questionRepository;
    private final OptionRepository optionRepository;
    private final GradeRepository gradeRepository;
    private final UserRepository userRepository;

    @Transactional
    public void initializeExamData() {
        log.info("üìù Initializing exam data (questions, options, exams)...");
        
        initializeQuestions();
        initializeExams();
        
        log.info("‚úÖ Successfully initialized exam data");
    }

    private void initializeQuestions() {
        log.debug("‚ùì Creating sample questions...");
        
        if (questionRepository.count() > 0) {
            log.info("‚ÑπÔ∏è Questions already exist, skipping question initialization");
            return;
        }

        List<Grade> grades = gradeRepository.findAll();
        Optional<User> adminUser = userRepository.findByUsername("admin"); // S·ª≠ d·ª•ng admin l√†m teacher m·∫´u
        
        if (grades.isEmpty() || adminUser.isEmpty()) {
            log.warn("‚ö†Ô∏è No grades or admin user found, cannot create questions");
            return;
        }

        User teacher = adminUser.get(); // S·ª≠ d·ª•ng admin l√†m teacher
        LocalDateTime now = LocalDateTime.now();

        // T·∫°o c√¢u h·ªèi cho t·ª´ng kh·ªëi l·ªõp
        for (Grade grade : grades) {
            createQuestionsForGrade(grade, teacher, now);
        }
        
        log.debug("‚úÖ Created {} questions", questionRepository.count());
    }

    private void createQuestionsForGrade(Grade grade, User teacher, LocalDateTime now) {
        // C√¢u h·ªèi To√°n h·ªçc - Beginner
        Question mathQuestion1 = Question.builder()
            .teacher(teacher)
            .questionText("T√≠nh: 15 + 27 = ?")
            .type("MULTIPLE_CHOICE")
            .difficulty("Beginner")
            .createdAt(now)
            .updatedAt(now)
            .grades(List.of(grade))
            .build();
        
        questionRepository.save(mathQuestion1);
        createOptionsForQuestion(mathQuestion1, List.of("42", "41", "43", "40"), 0);

        Question mathQuestion2 = Question.builder()
            .teacher(teacher)
            .questionText("M·ªôt h√¨nh ch·ªØ nh·∫≠t c√≥ chi·ªÅu d√†i 8cm, chi·ªÅu r·ªông 5cm. T√≠nh di·ªán t√≠ch?")
            .type("MULTIPLE_CHOICE")
            .difficulty("Intermediate")
            .createdAt(now)
            .updatedAt(now)
            .grades(List.of(grade))
            .build();
        
        questionRepository.save(mathQuestion2);
        createOptionsForQuestion(mathQuestion2, List.of("40 cm¬≤", "39 cm¬≤", "41 cm¬≤", "38 cm¬≤"), 0);

        // C√¢u h·ªèi To√°n n√¢ng cao - Advanced
        Question mathQuestion3 = Question.builder()
            .teacher(teacher)
            .questionText("Gi·∫£i ph∆∞∆°ng tr√¨nh: 2x¬≤ + 5x - 3 = 0")
            .type("MULTIPLE_CHOICE")
            .difficulty("Advanced")
            .createdAt(now)
            .updatedAt(now)
            .grades(List.of(grade))
            .build();
        
        questionRepository.save(mathQuestion3);
        createOptionsForQuestion(mathQuestion3, List.of("x = 1/2 ho·∫∑c x = -3", "x = 1 ho·∫∑c x = -3", "x = -1/2 ho·∫∑c x = 3", "x = 2 ho·∫∑c x = -1"), 0);

        // C√¢u h·ªèi To√°n chuy√™n s√¢u - Expert
        Question mathQuestion4 = Question.builder()
            .teacher(teacher)
            .questionText("T√≠nh t√≠ch ph√¢n: ‚à´(0 to œÄ) sin(x)dx")
            .type("MULTIPLE_CHOICE")
            .difficulty("Expert")
            .createdAt(now)
            .updatedAt(now)
            .grades(List.of(grade))
            .build();
        
        questionRepository.save(mathQuestion4);
        createOptionsForQuestion(mathQuestion4, List.of("2", "1", "œÄ", "0"), 0);

        // C√¢u h·ªèi Ti·∫øng Vi·ªát - Beginner
        Question vietnameseQuestion1 = Question.builder()
            .teacher(teacher)
            .questionText("T·ª´ n√†o sau ƒë√¢y l√† danh t·ª´?")
            .type("MULTIPLE_CHOICE")
            .difficulty("Beginner")
            .createdAt(now)
            .updatedAt(now)
            .grades(List.of(grade))
            .build();
        
        questionRepository.save(vietnameseQuestion1);
        createOptionsForQuestion(vietnameseQuestion1, List.of("s√°ch", "ƒë·ªçc", "nhanh", "ƒë·∫πp"), 0);

        Question vietnameseQuestion2 = Question.builder()
            .teacher(teacher)
            .questionText("C√¢u n√†o sau ƒë√¢y l√† c√¢u c·∫£m th√°n?")
            .type("MULTIPLE_CHOICE")
            .difficulty("Intermediate")
            .createdAt(now)
            .updatedAt(now)
            .grades(List.of(grade))
            .build();
        
        questionRepository.save(vietnameseQuestion2);
        createOptionsForQuestion(vietnameseQuestion2, 
            List.of("Tr·ªùi h√¥m nay ƒë·∫πp qu√°!", "H√¥m nay tr·ªùi ƒë·∫πp.", "Tr·ªùi c√≥ ƒë·∫πp kh√¥ng?", "H√£y nh√¨n tr·ªùi."), 0);

        // C√¢u h·ªèi VƒÉn h·ªçc - Advanced
        Question vietnameseQuestion3 = Question.builder()
            .teacher(teacher)
            .questionText("T√°c ph·∫©m 'Truy·ªán Ki·ªÅu' c·ªßa Nguy·ªÖn Du thu·ªôc th·ªÉ lo·∫°i n√†o?")
            .type("MULTIPLE_CHOICE")
            .difficulty("Advanced")
            .createdAt(now)
            .updatedAt(now)
            .grades(List.of(grade))
            .build();
        
        questionRepository.save(vietnameseQuestion3);
        createOptionsForQuestion(vietnameseQuestion3, List.of("Truy·ªán th∆°", "Ti·ªÉu thuy·∫øt", "K·ªãch", "T·∫£n vƒÉn"), 0);

        // C√¢u h·ªèi Ng·ªØ vƒÉn chuy√™n s√¢u - Expert
        Question vietnameseQuestion4 = Question.builder()
            .teacher(teacher)
            .questionText("Ph√¢n t√≠ch t√°c d·ª•ng c·ªßa vi·ªác s·ª≠ d·ª•ng ƒëi·ªáp t·ª´ trong th∆° Nguy·ªÖn Du")
            .type("ESSAY")
            .difficulty("Expert")
            .createdAt(now)
            .updatedAt(now)
            .grades(List.of(grade))
            .build();
        
        questionRepository.save(vietnameseQuestion4);
        // C√¢u h·ªèi ESSAY kh√¥ng c·∫ßn t·∫°o options

        // C√¢u h·ªèi Khoa h·ªçc - Beginner
        Question scienceQuestion1 = Question.builder()
            .teacher(teacher)
            .questionText("N∆∞·ªõc s√¥i ·ªü nhi·ªát ƒë·ªô bao nhi√™u ƒë·ªô C?")
            .type("MULTIPLE_CHOICE")
            .difficulty("Beginner")
            .createdAt(now)
            .updatedAt(now)
            .grades(List.of(grade))
            .build();
        
        questionRepository.save(scienceQuestion1);
        createOptionsForQuestion(scienceQuestion1, List.of("100¬∞C", "90¬∞C", "110¬∞C", "80¬∞C"), 0);

        Question scienceQuestion2 = Question.builder()
            .teacher(teacher)
            .questionText("C∆° quan n√†o c·ªßa c√¢y l√†m nhi·ªám v·ª• quang h·ª£p?")
            .type("MULTIPLE_CHOICE")
            .difficulty("Intermediate")
            .createdAt(now)
            .updatedAt(now)
            .grades(List.of(grade))
            .build();
        
        questionRepository.save(scienceQuestion2);
        createOptionsForQuestion(scienceQuestion2, List.of("L√°", "Th√¢n", "R·ªÖ", "Hoa"), 0);

        // C√¢u h·ªèi V·∫≠t l√Ω - Advanced
        Question scienceQuestion3 = Question.builder()
            .teacher(teacher)
            .questionText("T·∫ßn s·ªë dao ƒë·ªông c·ªßa con l·∫Øc ƒë∆°n ph·ª• thu·ªôc v√†o y·∫øu t·ªë n√†o?")
            .type("MULTIPLE_CHOICE")
            .difficulty("Advanced")
            .createdAt(now)
            .updatedAt(now)
            .grades(List.of(grade))
            .build();
        
        questionRepository.save(scienceQuestion3);
        createOptionsForQuestion(scienceQuestion3, List.of("Chi·ªÅu d√†i d√¢y v√† gia t·ªëc tr·ªçng tr∆∞·ªùng", "Kh·ªëi l∆∞·ª£ng v√† chi·ªÅu d√†i", "Bi√™n ƒë·ªô dao ƒë·ªông", "Nhi·ªát ƒë·ªô m√¥i tr∆∞·ªùng"), 0);

        // C√¢u h·ªèi H√≥a h·ªçc chuy√™n s√¢u - Expert  
        Question scienceQuestion4 = Question.builder()
            .teacher(teacher)
            .questionText("Vi·∫øt ph∆∞∆°ng tr√¨nh c√¢n b·∫±ng v√† gi·∫£i th√≠ch c∆° ch·∫ø ph·∫£n ·ª©ng SN2")
            .type("ESSAY")
            .difficulty("Expert")
            .createdAt(now)
            .updatedAt(now)
            .grades(List.of(grade))
            .build();
        
        questionRepository.save(scienceQuestion4);
        // C√¢u h·ªèi ESSAY kh√¥ng c·∫ßn t·∫°o options
    }

    private void createOptionsForQuestion(Question question, List<String> optionTexts, int correctIndex) {
        for (int i = 0; i < optionTexts.size(); i++) {
            Option option = Option.builder()
                .question(question)
                .optionText(optionTexts.get(i))
                .isCorrect(i == correctIndex)
                .build();
            
            optionRepository.save(option);
        }
    }

    private void initializeExams() {
        log.debug("üìã Creating sample exams...");
        
        if (examRepository.count() > 0) {
            log.info("‚ÑπÔ∏è Exams already exist, skipping exam initialization");
            return;
        }

        List<Grade> grades = gradeRepository.findAll();
        Optional<User> adminUser = userRepository.findByUsername("admin");
        
        if (grades.isEmpty() || adminUser.isEmpty()) {
            log.warn("‚ö†Ô∏è No grades or admin user found, cannot create exams");
            return;
        }

        User teacher = adminUser.get();
        LocalDateTime now = LocalDateTime.now();

        // T·∫°o b√†i ki·ªÉm tra cho t·ª´ng kh·ªëi l·ªõp
        for (Grade grade : grades) {
            createExamsForGrade(grade, teacher, now);
        }
        
        log.debug("‚úÖ Created {} exams", examRepository.count());
    }

    private void createExamsForGrade(Grade grade, User teacher, LocalDateTime now) {
        // L·∫•y t·∫•t c·∫£ c√¢u h·ªèi v√† filter theo grade
        List<Question> allQuestions = questionRepository.findAll();
        List<Question> gradeQuestions = allQuestions.stream()
            .filter(q -> q.getGrades().contains(grade))
            .toList();
        
        if (gradeQuestions.isEmpty()) {
            log.warn("‚ö†Ô∏è No questions found for grade {}, cannot create exams", grade.getName());
            return;
        }

        // T·∫°o b√†i ki·ªÉm tra To√°n h·ªçc
        Exam mathExam = Exam.builder()
            .teacher(teacher)
            .grade(grade)
            .title("Ki·ªÉm tra To√°n h·ªçc - " + grade.getName())
            .description("B√†i ki·ªÉm tra m√¥n To√°n h·ªçc d√†nh cho " + grade.getName())
            .difficulty("MEDIUM")
            .status("PUBLISHED")
            .approvedBy(teacher)
            .createdAt(now)
            .updatedAt(now)
            .questions(gradeQuestions.subList(0, Math.min(2, gradeQuestions.size()))) // L·∫•y 2 c√¢u h·ªèi ƒë·∫ßu
            .build();
        
        examRepository.save(mathExam);

        // T·∫°o b√†i ki·ªÉm tra Ti·∫øng Vi·ªát
        if (gradeQuestions.size() >= 4) {
            Exam vietnameseExam = Exam.builder()
                .teacher(teacher)
                .grade(grade)
                .title("Ki·ªÉm tra Ti·∫øng Vi·ªát - " + grade.getName())
                .description("B√†i ki·ªÉm tra m√¥n Ti·∫øng Vi·ªát d√†nh cho " + grade.getName())
                .difficulty("MEDIUM")
                .status("PUBLISHED")
                .approvedBy(teacher)
                .createdAt(now)
                .updatedAt(now)
                .questions(gradeQuestions.subList(2, 4)) // L·∫•y 2 c√¢u h·ªèi ti·∫øp theo
                .build();
            
            examRepository.save(vietnameseExam);
        }

        // T·∫°o b√†i ki·ªÉm tra Khoa h·ªçc
        if (gradeQuestions.size() >= 6) {
            Exam scienceExam = Exam.builder()
                .teacher(teacher)
                .grade(grade)
                .title("Ki·ªÉm tra Khoa h·ªçc - " + grade.getName())
                .description("B√†i ki·ªÉm tra m√¥n Khoa h·ªçc d√†nh cho " + grade.getName())
                .difficulty("MEDIUM")
                .status("PUBLISHED")
                .approvedBy(teacher)
                .createdAt(now)
                .updatedAt(now)
                .questions(gradeQuestions.subList(4, 6)) // L·∫•y 2 c√¢u h·ªèi cu·ªëi
                .build();
            
            examRepository.save(scienceExam);
        }
    }
}